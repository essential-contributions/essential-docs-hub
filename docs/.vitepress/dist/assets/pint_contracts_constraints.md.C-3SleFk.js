import{_ as n,c as t,a0 as a,o as e}from"./chunks/framework.DxQyBxTE.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pint/contracts/constraints.md","filePath":"pint/contracts/constraints.md"}'),o={name:"pint/contracts/constraints.md"};function i(r,s,p,c,l,d){return e(),t("div",null,s[0]||(s[0]=[a(`<h3 id="constraints" tabindex="-1"><strong>Constraints</strong> <a class="header-anchor" href="#constraints" aria-label="Permalink to &quot;**Constraints**&quot;">​</a></h3><p><strong>Constraints</strong> are the foundational components of predicates. They are simply <strong>boolean expressions</strong> that need to evaluate to <strong>True</strong> for the predicate they’re part of to be satisfied.</p><p>Constraints can be used flexibly:</p><ul><li>A contract may define constraints directly for its state mutation.</li><li>Alternatively, it can apply constraints to state mutations on other contracts, requiring <strong>both sets of constraints</strong> to be satisfied.</li></ul><p>This flexibility enables <strong>efficient code reuse</strong>. For example, constraints governing a <strong>token swap</strong> can be deployed once and used across multiple applications. Additionally, users can apply <strong>User Data</strong> to further restrict the solution space of a predicate, which is covered in-depth in the chapter on <strong>User Data and Solutions</strong>.</p><div class="language-pint vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">pint</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>predicate test(</span></span>
<span class="line"><span>    foo: int, </span></span>
<span class="line"><span>    bar: bool, </span></span>
<span class="line"><span>    baz: b256, </span></span>
<span class="line"><span>) {</span></span>
<span class="line"><span>    constraint foo * foo &lt;= 1024;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // other constraints</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,6)]))}const u=n(o,[["render",i]]);export{g as __pageData,u as default};
