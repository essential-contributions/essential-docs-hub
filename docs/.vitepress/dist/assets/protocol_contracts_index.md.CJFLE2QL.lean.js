import{_ as e,c as a,a0 as s,o}from"./chunks/framework.TZSYhTdi.js";const h=JSON.parse('{"title":"Contracts","description":"","frontmatter":{},"headers":[],"relativePath":"protocol/contracts/index.md","filePath":"protocol/contracts/index.md"}'),n={name:"protocol/contracts/index.md"};function r(i,t,c,l,p,d){return o(),a("div",null,t[0]||(t[0]=[s('<h1 id="contracts" tabindex="-1">Contracts <a class="header-anchor" href="#contracts" aria-label="Permalink to &quot;Contracts&quot;">​</a></h1><p>In Essential, state belongs to <strong>contracts</strong> that declare it, similar to other blockchains. However, unlike traditional imperative blockchain languages (e.g., Solidity), Essential uses a <strong>declarative approach</strong>.</p><p><strong>Imperative Smart Contracts</strong> typically:</p><ul><li>Take inputs and execute a sequence of operations.</li><li>Update state as a side-effect of these operations.</li></ul><p>In contrast, Essential’s declarative contracts achieve <strong>state updates without execution</strong>. Instead of executing steps, Essential starts with a proposed <strong>atomic state mutation</strong> (a set of new state values). It then substitutes these values into a contract to check their <strong>validity</strong>. This approach reverses the typical order seen in imperative contracts.</p>',5)]))}const g=e(n,[["render",r]]);export{h as __pageData,g as default};
