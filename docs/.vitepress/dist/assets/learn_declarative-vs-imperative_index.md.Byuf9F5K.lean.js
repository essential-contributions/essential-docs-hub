import{_ as t,c as a,a0 as i,o as n}from"./chunks/framework.DxQyBxTE.js";const m=JSON.parse('{"title":"Declarative vs. Imperative Concepts","description":"","frontmatter":{},"headers":[],"relativePath":"learn/declarative-vs-imperative/index.md","filePath":"learn/declarative-vs-imperative/index.md"}'),o={name:"learn/declarative-vs-imperative/index.md"};function r(s,e,l,c,d,p){return n(),a("div",null,e[0]||(e[0]=[i('<h1 id="declarative-vs-imperative-concepts" tabindex="-1">Declarative vs. Imperative Concepts <a class="header-anchor" href="#declarative-vs-imperative-concepts" aria-label="Permalink to &quot;Declarative vs. Imperative Concepts&quot;">​</a></h1><p>Declarative blockchains are a novel concept. To fully grasp what they are and why they are important, it&#39;s helpful to first understand some core principles and ideas.</p><p>This section provides background context on:</p><ul><li>The differences between declarative and imperative approaches to programming</li><li>The pitfalls of imperative design in the context of blockchains</li><li>The rising adoption of intents as a declarative design pattern in web3</li></ul><p>This section of the docs is designed to be read sequentially. You&#39;ll get the best understanding if you go through page-by-page.</p><h2 id="a-note-on-terminology" tabindex="-1">A Note on Terminology <a class="header-anchor" href="#a-note-on-terminology" aria-label="Permalink to &quot;A Note on Terminology&quot;">​</a></h2><p>Throughout these docs, you will see the following terms frequently:</p><ul><li><strong>Declarative</strong></li><li><strong>Intent; intent-centric; intent-based</strong></li><li><strong>Outcome; end-result</strong></li></ul><p>Fundamentally, they all refer to the same concept: interactions with blockchains should be framed and processed in terms of the user&#39;s intended outcome.</p><p>When a user submits an intent, they are making a declarative statement about what outcome they want on-chain.</p>',10)]))}const u=t(o,[["render",r]]);export{m as __pageData,u as default};
