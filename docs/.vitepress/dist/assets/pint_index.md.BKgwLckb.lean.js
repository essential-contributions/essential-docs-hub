import{_ as e,c as n,a0 as i,o as a}from"./chunks/framework.DxQyBxTE.js";const p=JSON.parse('{"title":"Pint","description":"","frontmatter":{"next":{"text":"Quickstart Guide","link":"/pint/quickstart"}},"headers":[],"relativePath":"pint/index.md","filePath":"pint/index.md"}'),o={name:"pint/index.md"};function s(r,t,c,l,h,d){return a(),n("div",null,t[0]||(t[0]=[i('<h1 id="pint" tabindex="-1">Pint <a class="header-anchor" href="#pint" aria-label="Permalink to &quot;Pint&quot;">​</a></h1><p><strong>Pint</strong> is a <strong>declarative programming language</strong> designed for building blockchain applications. Unlike imperative languages (e.g., Solidity), where you must specify each step of execution, <strong>declarative programming</strong> in Pint focuses on describing the logic and goals of the program rather than its explicit steps. In other words, with Pint, you describe <strong>what the program should accomplish</strong> rather than <strong>how to accomplish it</strong>.</p><h2 id="constraint-based-language" tabindex="-1">Constraint-Based Language <a class="header-anchor" href="#constraint-based-language" aria-label="Permalink to &quot;Constraint-Based Language&quot;">​</a></h2><p>Pint is a <strong>constraint-based language</strong>:</p><ul><li>A Pint program is essentially a collection of <strong>predicates</strong>, and each predicate is a collection of <strong>constraints</strong>.</li><li>Since blockchain applications focus on <strong>state transitions</strong>, constraints allow you to specify which state changes are valid, without needing to define how the state changes should occur.</li></ul><p>This approach lets developers <strong>define permissible state changes</strong> rather than detailing each action needed to reach a new state.</p><h4 id="how-to-use-this-section" tabindex="-1">How to Use This Section <a class="header-anchor" href="#how-to-use-this-section" aria-label="Permalink to &quot;How to Use This Section&quot;">​</a></h4><p>This section is structured to be read <strong>in sequence from front to back</strong>:</p><ul><li>Later sections build on concepts introduced in earlier ones.</li><li>Earlier sections may touch on topics without exploring them fully, with deeper discussions in later ones.</li></ul><p>While this can be used as a <strong>reference</strong>, keep in mind that it is <strong>not fully comprehensive.</strong></p>',10)]))}const u=e(o,[["render",s]]);export{p as __pageData,u as default};
